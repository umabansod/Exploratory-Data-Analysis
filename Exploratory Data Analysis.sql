-- EXPLORE ALL OBJECTS IN DATABASE

SELECT * FROM INFORMATION_SCHEMA.TABLES


-- EXPLORE ALL COLUMNS IN THE DATABASE
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='dim_customers';

--2) DIMENTIONS EXPLORATION
--  EXPLORE ALL COUNTRIES OUR CUSTOMERS COME FROM.
SELECT DISTINCT country from gold.dim_customers;

-- EXPLORE ALL CATEGORIES 'THE MAJOR DIVISIONS'

SELECT DISTINCT category , subcategory , product_name from gold.dim_product 
order by 1,2,3;

--3) DATE EXPLORATION
-- find the date of the first and last order
-- How many years of sales are available.
SELECT 
MIN(order_date) as first_order_date,
max(order_date) as last_order_date,
DATEDIFF(year,min(order_date),max(order_date)) as order_range_years
from gold.fact_sales;

-- Find the youngest and Oldest customer.
select min(birthdate) as old_customer,
datediff(year,min(birthdate),getdate()) as old_age,
max(birthdate) as young_customer,
datediff(year,max(birthdate),getdate()) as young_age
from gold.dim_customers;


-- MEASURE EXPLORATION 
--FIND TOTAL SALES
SELECT SUM(sales_amount) as total_sales FROM gold.fact_sales;

--FIND HOW MANY ITEMS ARE SOLD
select sum(quantity) as total from gold.fact_sales;
--FIND THE AVERAGE SELLING PRICE
select AVG(price) as avg_price from gold.fact_sales;
--FIND THE TOTAL NUMBER OF ORDERS
select count(order_number) as total_order from gold.fact_sales;
select count(distinct order_number) as total_orders from gold.fact_sales;
--FIND THE TOTAL NUMBER OF PRODUCTS
select * from gold.dim_product;
select count(distinct product_name) from gold.dim_product;
select count(product_Key) as total_product from gold.dim_product;
--FIND THE TOTAL NUMBER OF CUSTOMERS
select count(customer_Key) from gold.dim_customers;
--FIND THE TOTAL NUMBER OF CUSTOMERS THAT HAS PLACED AN ORDER
select count(DISTINCT customer_Key) from gold.dim_customers;

select count(DISTINCT c.customer_key) as total_customer 
from gold.dim_customers c
join gold.fact_sales f
on c.customer_key = f.customer_Key;


--GENERATE A REPORT THAT SHOWS ALL KEY METRICS OF THE BUSINESS

SELECT	'Total_sales' as measure_name , sum(sales_amount) as measure_value from gold.fact_sales
union all
select 'Total Quantity' as measure_name, sum(quantity) as measure_value from gold.fact_sales
union all
select 'Average price ' as measure_name , avg(price) as measure_value from gold.fact_sales
union all
select 'Total no.of order' as measure_name, count(distinct order_number) as measure_value from gold.fact_sales
union all
select 'Total no. of product' as measure_name , count(product_name) from gold.dim_product
union all
select 'Total no. of customer' as measure_name , count(customer_key) from gold.dim_customers

-- MAGNITUDE

-- FIND THE TOTAL CUSTOMERS BY COUNTRIES 
select country,
count(customer_key) as total_customer
from gold.dim_customers
group by country
order by count(customer_key) desc;

-- Find the Total customer by gender

select gender,
count(customer_key) as total_customer
from gold.dim_customers
group by gender
order by count(customer_key) desc; 

-- Find total product by category
select category,
count( product_key) as total_product
from gold.dim_product
group by category
order by count(product_name) desc;

--what is the average costs in each category?
select category,
avg(cost) as avg_cost
from gold.dim_product
group by category
order by avg(cost) desc;

-- what is the total revenue generated for each category?
select 
d.category,
sum(f.sales_amount) as total_revenue
from gold.fact_sales f
left join 
gold.dim_product d
on f.product_key = d.product_key
group by d.category
order by total_revenue desc
-- find total revenue is generated by each customer
select 
c.customer_key,
c.first_name,
c.last_name,
sum(f.sales_amount) as total_revenue
from gold.fact_sales f
left join
gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by sum(f.sales_amount) desc 


-- what is the distribution of sold items across countries ?
select 
c.country,
sum(f.quantity) as total_sold_items
from gold.fact_sales f
left join gold.dim_customers c
on c.customer_key = f.customer_key
group by 
c.country
order by total_sold_items desc;


--- RANKING EXPLORATION


-- which 5 products generate the higherst revenue?

select top 5
p.product_name,
sum(f.sales_amount) as total_revenue
from gold.fact_sales f
left join gold.dim_product p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue desc ;

select * from 
(select
	p.product_name,
	sum(f.sales_amount) as total_revenue,
	ROW_NUMBER() over (order by sum(f.sales_amount) desc) as rank_products
	from gold.fact_sales f
	left join gold.dim_product p
	on p.product_key = f.product_key
	group by p.product_name)t
where rank_products <= 5

-- what are th 5 worst -performing products in terms of sales?


select top 5
p.product_name,
sum(f.sales_amount) as total_revenue
from gold.fact_sales f
left join gold.dim_product p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue

-- Find the top 10 customers who have generated the highest revenue

select top 10 
c.customer_key,
c.first_name,
c.last_name,
sum(f.sales_amount) as total_revenue
from gold.fact_sales f
left join
gold.dim_customers c
on c.customer_key= f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by total_revenue asce;


-- The 3 customers with the fewest order placed
select top 3
c.customer_key,
c.first_name,
c.last_name,
count(distinct f.order_number) as total_orders
from gold.fact_sales f
left join
gold.dim_customers c
on c.customer_key= f.customer_key
group by 
c.customer_key,
c.first_name,
c.last_name
order by total_orders desc;


-- CHANGE OVER TIME 

SELECT 
YEAR(order_date) as order_year,
month(order_date) as order_month,
sum(sales_amount) as total_sales,
count(distinct customer_key) as total_customers,
sum(quantity ) as total_quantity
from gold.fact_sales
where order_date is not null
group by year(order_date) , month(order_date)
order by year(order_date), month ( order_date)


SELECT 
datetrunc(year,order_date) as order_year,
sum(sales_amount) as total_sales,
count(distinct customer_key) as total_customers,
sum(quantity ) as total_quantity
from gold.fact_sales
where order_date is not null
group by datetrunc(year,order_date)
order by datetrunc(year,order_date)

SELECT 
format(order_date,'yyyy-mmm') as order_year,
sum(sales_amount) as total_sales,
count(distinct customer_key) as total_customers,
sum(quantity ) as total_quantity
from gold.fact_sales
where order_date is not null
group by format(order_date,'yyyy-mmm')
order by format(order_date,'yyyy-mmm')

SELECT 
datetrunc(month,order_date) as order_year,
sum(sales_amount) as total_sales,
count(distinct customer_key) as total_customers,
sum(quantity ) as total_quantity
from gold.fact_sales
where order_date is not null
group by datetrunc(month,order_date)
order by datetrunc(month,order_date)



-- CUMMULATIVE ANALYSIS

-- CALCULATE THE TOTAL SALES PER MONTH AND THE RUNNING TOTAL OF SALES OVER TIME .
select order_date,
total_sales ,
sum(total_sales) over(order by order_date) as running_total_sales ,
avg(avg_price) over (order by order_date) as moving_average
from
(
SELECT datetrunc(month,order_date) as order_date,
sum(sales_amount) as total_sales,
avg(price) as avg_price
from gold.fact_sales
where order_date is not null
group by datetrunc(month,order_date)
)t



-- PERFORMANCE ANALYSIS

/*Analyze the yearly performance of products by comparing each product's sales to both 
its average sales performance and the previous year's sales. */

WITH yearly_product_sales as (
select 
year(f.order_date) as order_year,
p.product_name,
sum(f.sales_amount) as current_sales
from gold.fact_sales f
left join gold.dim_product p 
on f.product_key = p.product_key
where f.order_date is not null
group by 
year(f.order_date),
p.product_name
)

select
order_year,
product_name,
current_sales,
avg(current_sales) over ( partition by product_name) as avg_sales,
current_sales - avg(current_sales) over ( partition by product_name) as diff_avg,
case when current_sales - avg(current_sales) over ( partition by product_name) >0 then 'Above Avg'
	when current_sales - avg(current_sales) over ( partition by product_name) < 0 then 'Below Avg'
	else 'Avg'
end avg_change,
lag(current_sales) over (partition by product_name order by current_sales) as py_sales ,
current_sales -lag(current_sales) over (partition by product_name order by current_sales) as diff_py,
case when lag(current_sales) over (partition by product_name order by current_sales)>0 then 'Increase'
	when lag(current_sales) over (partition by product_name order by current_sales) <0 then 'Decrease'
	else 'no change'
end py_change
from yearly_product_sales
order by product_name,order_year;


-- PART TO WHOLE 

-- Which categories contribute the most to overall sales 
with category_sales as (
select p.category,
sum(f.sales_amount ) as total_sales 
from gold.fact_sales f
left join 
gold.dim_product p
on p.product_key = f.product_key
group by p.category 
)
select 
category,
total_sales,
sum(total_sales) over() overall_sales,
concat(round((cast (total_sales as float)/sum(total_sales) over( ) )*100 ,2),'%')as percentage_total
from category_sales 
order by total_sales desc


-- DATA SEGMENTATION

/* Segment products into cost ranges and count how many products fall into each segment */

with cost_segment as (
select 
product_key,
product_name ,
cost,
case when cost <100 then 'Below 100'
	when cost between 100 and 500 then '100-500'
	when cost between 500 and 1000 then '500-1000'
	else 'above 1000'
end cost_range
from gold.dim_product
)

select cost_range,
count(product_key) as total_product
from cost_segment
group by cost_range
order by total_product desc 


/* Group customers into three segments based on their spending behavior:
 - VIP : Customers with atleast 12 months of history and spending more than $5000.
 - Regular : Customers with atleast 12 months of history but spending $5000 or less.
 - New : Customers with a lifespan less than 12 months.
 and Find the total number of customers by each group.
 */


with customer_spending as ( 
 select 
 c.customer_key,
sum(f.sales_amount) as total_spending,
min(f.order_date) as first_order,
max(f.order_date) as last_order,
datediff(month,min(f.order_date), max(f.order_date)) as lifespan
from gold.fact_sales f
left join
gold.dim_customers c
on f.customer_key = c.customer_key
group by c.customer_key
)

select customer_segment ,
count(customer_key) total_customers
from(select 
 customer_key,
 total_spending,
 lifespan,
 case when lifespan >= 12 and total_spending > 5000 then 'VIP'
	when lifespan >= 12 and total_spending <=5000 then 'Regular'
	else 'New'
end customer_segment
from customer_spending) t
group by customer_segment
order by count(customer_key) desc;



/* 
***********************************************************************
Customer Report 
***********************************************************************

Purpose :
	- This report consolidates key customre metrics and behaviors

Highlights:
1. Gathers essential fields such as names, ages, and transaction details.
2. Segments customers into categories ( VIP, Regular, New) and age groups.
3. Aggregates customer-level metrics:
- Total orders
- Total sales
- Total quantity purchased
- Total products
- lifespan ( in months ) 
4. Calculates valuable KIPs:
- recency ( months since last order )
- average order values
- average monthly spend 
*************************************************************************
*/


